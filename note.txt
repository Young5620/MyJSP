HTTP : 프로토콜
  - text기반의 프로토콜

  HTTP의 서버에 정보를 전송하거나 요청하는 방식 2가지(DATA처리방식)

   1) GET방식
   - 서버에 데이터를 요청하는 용도 (request)
   - 전송하는 데이터 URL에 포함되어 전달됨
    ex) http://localhost/login.jsp?id=user&pw=pass
   - 전송했던 데이터는 브라우저의 히스토리에 접속했을 경우에 남아있음
     (보안성이 취약)
   - 게시판 글 조회, 검색 같이 서버에 정보를 가져올 필요가 있을 경우
   - 전송할 수 있는 최대 크기가 브라우저별로 다르지만 정해져있다.(4kbyte=4096byte)
   - HTML form태그가 꼭 필요한 것은 아니다.


   2) POST방식 
   - 서버에 데이터를 전송하는 용도
   - 전송되는 데이터가 URL에 표시되지않고, 객체의 메세지 body를 통해서 전달됨
   - 브라우저에 전달되는 데이터가 남지 않기 때문에 보안성이 GET보다 강하다.
   - 비밀번호나 주민번호 등 Private한 정보를 서버에 전송해야 할 때 사용
   - 반드시 HTML form태그를 사용해서 처리해야함(**)
   - 데이터의 양의 제한이 없기 때문에 대량의 데이터를 전송할 수 있음

==========================================================

## Request 객체(내장객체)

 - 웹 브라우저를 통해 서버에 어떤 정보를 요청하는 것을 Request라고 하고, 이 때 
   요청 정보를 담아 관리하는 객체를 'Request'라고 한다.

 제공하는 기능
 1. 클라이언트와 관련된 정보읽기
 2. 서버와 관련된 정보 읽기 기능
 3. 클라이언트가 전송한 요청 파라미터 읽기
 4. 클라이언트가 전송한 쿠키읽기 기능(웹 세션)

 **Request 객체 관련 주요 메서드
 1) getContextPath() : String - 웹 어플리케이션의 컨텍스트 루트의 경로
 2) getMethod() : String - 웹 브라우저가 정보를 전송할 때 사용한 방식
 3) getServerName() : String - 연결할 때 사용한 서버이름
 4) getServerPort() : int - 서버가 실행중인 포트 번호
 5) getRequestURL() : StringBuffer - 요청 URL을 얻는다.
 6) getRequestURI() : String - 요청 URI를 얻는다.
 7) getRemoteAddr() : String - 웹 서버에 연결한 클라이언트 IP주소
 8) getProtocol() : String - 해당 프로토콜
 9) getParemeter(name) : 이름이 name인 파라미터 값을 구한다. 
                                존재하지 않을 경우 null을 반환
 10) gerParameterValues(name) : 이름이 name인 모든 파라미터 값들을 배열로 구한다. 
                                         존재하지 않을 경우 null을 반환 (checkbox)

 참조 : https://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html

==========================================================

## PATH
 - 웹에서 접근하는 경로

  1. 절대경로 : 프로젝트 전체경로(port번호를 제외한 "/"컨텍스트로 경로를 참조하는 경우)
  	      기준 - "/"
  2. 상대경로 : 현재위치에서 다른 파일의 경로를 참조
	      기준 - 현재 작업위치
